<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireMothConsole</name>
    </assembly>
    <members>
        <member name="T:RiotClub.FireMoth.Console.ExitState">
            <summary>
            Specifies the cause of program termination.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Console.ExitState.Normal">
            <summary>
            Inidicates nominal program execution and shutdown.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Console.ExitState.StartupError">
            <summary>
            Inidicates an error occurred during program initialization.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Console.ExitState.RuntimeError">
            <summary>
            Indicates an error occurred after program initialization.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Console.Initializer">
            <summary>
            Validates application startup parameters and initiates directory scan.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Initializer.#ctor(System.String[],System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Console.Initializer"/> class.
            </summary>
            <param name="processArguments">An array of <see cref="T:System.String"/>s containing process
            startup (command line) arguments.</param>
            <param name="outputWriter">A <see cref="T:System.IO.TextWriter"/> that initialization messages will
            be written to.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Console.Initializer.Initialized">
            <summary>
            Gets or sets a value indicating whether the application has been initialized and is
            ready for startup.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Initializer.Initialize">
            <summary>
            Performs initialization tasks to prepare application for startup. This must be called
            before the call to the <see cref="M:RiotClub.FireMoth.Console.Initializer.Start"/> method.
            </summary>
            <returns><c>true</c> if initialization was successful and the application is ready for
            startup.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Initializer.Start">
            <summary>
            Begins scanning the directory specified during application startup.
            </summary>
            <returns>An <see cref="T:RiotClub.FireMoth.Console.ExitState"/> indicating the result of the directory scan
            operation.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Initializer.ValidateStartupArguments(System.String[])">
            <summary>
            Verifies that the provided arguments are valid process startup arguments.
            </summary>
            <param name="arguments">An array of <see cref="T:System.String"/> containing process command line
            arguments.</param>
            <returns><c>true</c> if the provided array of arguments contains only valid command line
            arguments, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Initializer.DisplayUsageMessage">
            <summary>
            Writes the application usage message to the status output.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Console.Program">
            <summary>
            Application entry point.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Console.Program.Main(System.String[])">
            <summary>
            Class and application entry point. Validates command-line arguments, performs startup
            configuration, and invokes the directory scanning process.
            </summary>
            <param name="args">Command-line arguments. A single argument, --directory, is currently
            supported and required. This value must be a well-formed and existing directory path.
            </param>
        </member>
    </members>
</doc>
